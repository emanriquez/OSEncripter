public static String generateToken(String run) {

    AES256Cipher.ivBytes = getSHA256base16(generarClaveDinamica(run)).getBytes();


    try {
        String keyEncript = getSHA256base32(“SECRET KEY”);

        String encodeText = AES256Cipher.AES_Encode(“TEXTO PASO”, keyEncript);

        // Log.d("encodeText 2","encodeText ->"+encodeText);

        encodeText = new String(Base64.encodeBase64(encodeText.getBytes("ASCII")));

        // Log.d("encodeText 2","encodeText ->"+encodeText);
        return encodeText;
    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (InvalidAlgorithmParameterException e) {
        e.printStackTrace();
    } catch (IllegalBlockSizeException e) {
        e.printStackTrace();
    } catch (BadPaddingException e) {
        e.printStackTrace();
    }
    return null;
}



public static String getSHA256base32(String text) {

    try {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hash = digest.digest(text.getBytes("UTF-8"));
        StringBuffer hexString = new StringBuffer();

        for (int i = 0; i < 16; i++) {
            String hex = Integer.toHexString(0xff & hash[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }

        return hexString.toString();
    } catch (Exception ex) {
        throw new RuntimeException(ex);
    }

}
